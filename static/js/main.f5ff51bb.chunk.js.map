{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","results","setResults","onFiles","files","newResults","Array","from","map","file","URL","createObjectURL","image","confidence","Math","random","existingResults","concat","className","onDrop","e","preventDefault","dataTransfer","onDragOver","type","multiple","accept","onChange","target","result","i","src","alt","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOA6DeA,MAtDf,WACE,MAAgCC,mBAAS,IAAzC,mBAAQC,EAAR,KAAiBC,EAAjB,KAEA,SAASC,EAAQC,GACf,IACMC,EADYC,MAAMC,KAAKH,GAAOI,KAAI,SAACC,GAAD,OAAUC,IAAIC,gBAAgBF,MACzCD,KAAI,SAACI,GAAD,MAAY,CAACA,QAAOC,WARhC,GAAhBC,KAAKC,SAAiB,OAS3Bb,GAAW,SAACc,GAAD,OAAqBA,EAAgBC,OAAOZ,MAGzD,OACE,sBAAKa,UAAU,MAAf,UACE,wBAAQA,UAAU,SAAlB,SACE,4DAEF,wBACEA,UAAU,SACVC,OAAQ,SAACC,GACPA,EAAEC,iBACFlB,EAAQiB,EAAEE,aAAalB,QAEzBmB,WAAY,SAACH,GACXA,EAAEC,kBAPN,kCAWI,uBACEG,KAAK,OACLC,UAAQ,EACRC,OAAO,UACPC,SAAU,SAACP,GACTjB,EAAQiB,EAAEQ,OAAOxB,aAIzB,yBAASc,UAAU,UAAnB,SACGjB,EAAQO,KAAI,SAACqB,EAAQC,GAAT,OACX,sBAAKZ,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAaa,IAAKF,EAAOjB,MAAOoB,IAAI,SACnD,qBAAKd,UAAU,gBACb,sBAAKA,UAAU,WAAf,UACE,+BAAM,4CACN,6CAEF,sBAAKA,UAAU,WAAf,UACE,+BAAM,kDACN,kCAA4B,IAApBW,EAAOhB,YAAkBoB,QAAQ,GAAzC,YATqBH,YC/BtBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f5ff51bb.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction randomConfidence() {\n  return Math.random() * 0.2 + 0.8\n}\n\nfunction App() {\n  const [ results, setResults ] = useState([])\n\n  function onFiles(files) {\n    const newImages = Array.from(files).map((file) => URL.createObjectURL(file))\n    const newResults = newImages.map((image) => ({image, confidence: randomConfidence()}))\n    setResults((existingResults) => existingResults.concat(newResults))\n  }\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <h1>Cat Reverse Image Search</h1>\n      </header>\n      <label\n        className=\"upload\"\n        onDrop={(e) => {\n          e.preventDefault()\n          onFiles(e.dataTransfer.files)\n        }}\n        onDragOver={(e) => {\n          e.preventDefault()\n        }}\n      >\n          Upload images of cats\n          <input\n            type=\"file\"\n            multiple\n            accept=\"image/*\"\n            onChange={(e) => {\n              onFiles(e.target.files)\n            }}\n          />\n      </label>\n      <section className=\"preview\">\n        {results.map((result, i) => (\n          <div className=\"chip\" key={i}>\n            <img className=\"chip-image\" src={result.image} alt=\"Chip\" />\n            <div className=\"chip-spacer\" />\n              <div className=\"chip-row\">\n                <code><strong>Name</strong></code>\n                <code>\"Chip\"</code>\n              </div>\n              <div className=\"chip-row\">\n                <code><strong>Confidence</strong></code>\n                <code>{(result.confidence * 100).toFixed(2)}%</code>\n              </div>\n          </div>\n        ))}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}